{
	"include": ["src/**/*", "build.ts"],
	"exclude": ["node_modules"],
	"compilerOptions": {
		"experimentalDecorators": true,
		"plugins": [
			{
				"name": "ts-lit-plugin",
				"strict": true
			}
		],

		"useDefineForClassFields": false,

		/* Visit https://aka.ms/tsconfig.json to read more about this file */

		/* Language and Environment */
		"target": "es2020" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,

		/* Modules */
		"module": "es2020" /* Specify what module code is generated. */,
		"moduleResolution": "node",
		/* JavaScript Support */
		"allowJs": true /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */,
		"checkJs": true /* Enable error reporting in type-checked JavaScript files. */,

		/* Emit */
		"noEmit": true /* Disable emitting files from a compilation. */,

		/* Interop Constraints */
		"allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,
		"esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */,
		"forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

		/* Type Checking */
		"strict": true /* Enable all strict type-checking options. */,
		"noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied `any` type.. */,
		"strictNullChecks": true /* When type checking, take into account `null` and `undefined`. */,
		"strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
		"noImplicitThis": true /* Enable error reporting when `this` is given the type `any`. */,
		"alwaysStrict": true /* Ensure 'use strict' is always emitted. */,
		"noUnusedLocals": true /* Enable error reporting when a local variables aren't read. */,
		"noUnusedParameters": true /* Raise an error when a function parameter isn't read */,
		"noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
		"noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */,

		/* Completeness */
		"skipDefaultLibCheck": true /* Skip type checking .d.ts files that are included with TypeScript. */,
		"skipLibCheck": true /* Skip type checking all .d.ts files. */
	}
}
